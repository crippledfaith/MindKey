@page "/makepost"
@page "/makepost/{IdeaId}"
@using MindKey.Shared.Models.MindKey
@inject IJSRuntime JSRuntime
@inject IIdeaService IdeaService
@inject IPersonService PersonService
@inject IUserService UserService
<div class="card">
    <div class="card-body">
        <h5 class="card-title">State Your Opinion</h5>
        <div class="row g-3">

            <div class="col-12">
                <label for="inputCity" class="form-label">Opinion</label>
                <input type="text" class="form-control" @bind="Title" placeholder="State Your Opinion">
            </div>

        </div>
        <label for="inputCity" class="form-label">Description</label>

        @if (EditorEnabled)
        {
            <div id="toolbar">
                <span class="ql-formats">
                    <select class="ql-font">
                        <option selected=""></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                    <select class="ql-size">
                        <option value="small"></option>
                        <option selected=""></option>
                        <option value="large"></option>
                        <option value="huge"></option>
                    </select>
                </span>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>
                    <select class="ql-align">
                        <option selected=""></option>
                        <option value="center"></option>
                        <option value="right"></option>
                        <option value="justify"></option>
                    </select>
                </span>

                <span class="ql-formats"><button type="button" class="ql-link"><svg viewBox="0 0 18 18"> <line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"></line> <path class="ql-even ql-stroke" d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z"></path> <path class="ql-even ql-stroke" d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z"></path> </svg></button><button type="button" class="ql-image"><svg viewBox="0 0 18 18"> <rect class="ql-stroke" height="10" width="12" x="3" y="4"></rect> <circle class="ql-fill" cx="6" cy="7" r="1"></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg></button><button type="button" class="ql-video"><svg viewBox="0 0 18 18"> <rect class="ql-stroke" height="12" width="12" x="3" y="3"></rect> <rect class="ql-fill" height="12" width="1" x="5" y="3"></rect> <rect class="ql-fill" height="12" width="1" x="12" y="3"></rect> <rect class="ql-fill" height="2" width="8" x="5" y="8"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="5"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="7"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="10"></rect> <rect class="ql-fill" height="1" width="3" x="3" y="12"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="5"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="7"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="10"></rect> <rect class="ql-fill" height="1" width="3" x="12" y="12"></rect> </svg></button></span>
            </div>
        }
        <div @ref="@divEditorElement" />
        <hr />
        <div class="text-center">
            <button type="button" class="btn btn-primary" @onclick="()=>Save()">Save</button>
            <button type="button" class="btn btn-primary" @onclick="()=>Publish()">Publish</button>
            <button type="reset" class="btn btn-secondary">Reset</button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string IdeaId { get; set; } = null;
    public Idea Idea { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    public async void Save()
    {
        if (Idea == null)
        {
            Idea = new Idea();
            Idea.Person = await PersonService.GetPersonByUser(UserService.User.Id);
            Idea.PostDateTime = DateTime.UtcNow;
        }
        Idea.Title = Title;
        Idea.Description = await GetHTML();
        Idea.PostDateTime = DateTime.UtcNow;
        if (Idea.Id != 0)
        {
            await IdeaService.UpdateIdea(Idea);
        }
        else
        {
            await IdeaService.AddIdea(Idea);
        }
    }
    public void Publish()
    {

    }
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(IdeaId))
        {
            Idea = await IdeaService.GetIdea(long.Parse(IdeaId));
            Title = Idea.Title;
            Description = Idea.Description;
            await SetContent(Description);
        }
        else
        {
            Idea = null;
            Title = "";
            Description = "";
            await SetContent(Description);
        }


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }
    }
    async Task GetText()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillText", divEditorElement);
    }
    async Task<string> GetHTML()
    {
        EditorContent = "";
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divEditorElement);
        return EditorHTMLContent;
    }
    async Task GetEditorContent()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task SaveContent()
    {
        strSavedContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task LoadContent()
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.loadQuillContent", divEditorElement, strSavedContent);
    }
    async Task SetContent(string content)
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.setQuillContent", divEditorElement, content);
    }
}
