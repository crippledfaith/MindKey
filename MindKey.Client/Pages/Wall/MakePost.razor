@page "/makepost"
@page "/makepost/{IdeaId}"
@attribute [Authorize]
@using MindKey.Client.Components
@using MindKey.Shared.Models.MindKey
@inject IIdeaService IdeaService
@inject IPersonService PersonService
@inject IUserService UserService
@inject EventService EventService
@inject NavigationManager NavigationManager
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Post Your Opinion</h5>
        <div class="row g-3">
            <div class="col-12">
                <label for="inputCity" class="form-label">Code Idea</label>
                <input type="text" class="form-control" @bind="Title" placeholder="State Your core idea">
            </div>
        </div>
        <label for="inputCity" class="form-label">Description</label>
        <QuillComponent @ref="Quill" />
        <div class="row g-3">
            <div class="col-12">
                <label for="inputCity" class="form-label">Tags</label>
                <input type="text" class="form-control" @bind="TagsString" placeholder="Add tags">
            </div>
        </div>

        <hr />
        <div class="text-center">
            <button type="button" class="btn btn-primary" @onclick="()=>Save()">Save</button>
            <button type="button" class="btn btn-primary" @onclick="()=>Publish()">Publish</button>
            <button type="reset" class="btn btn-secondary" @onclick="()=>Reset()">Reset</button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string? IdeaId { get; set; } = null;
    public Idea? Idea { get; set; }
    public string Title { get; set; } = string.Empty;
    public string TagsString { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public QuillComponent? Quill { get; set; }
    public async void Save()
    {
        try
        {
            if (Quill != null)
            {
                if (Idea == null)
                {
                    Idea = new Idea();

                    Idea.Person = await PersonService.GetPersonByUser(UserService.User.Id);
                    Idea.PostDateTime = DateTime.UtcNow;
                }
                Idea.Title = Title;
                Idea.Description = await Quill.GetHTML();
                Idea.IsPublished = false;
                var text = await Quill.GetText();
                if (text.Length > 500)
                {
                    Idea.DescriptionShort = text.Substring(0, 500) + "...";
                }
                else
                {
                    Idea.DescriptionShort = text + "...";
                }
                Idea.PostDateTime = DateTime.UtcNow;
                Idea.Tags = TagsString.Split(' ').ToList().Select(q => new Tag { Name = q }).ToList();
                if (Idea.Id != 0)
                {
                    await IdeaService.UpdateIdea(Idea);
                }
                else
                {
                    Idea = await IdeaService.AddIdea(Idea);
                }
                EventService.ShowMessage("Opinion Saved.", MessageType.Success);
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }


    }
    public async void Publish()
    {
        try
        {
            if (Quill != null)
            {
                if (Idea == null)
                {
                    Idea = new Idea();

                    Idea.Person = await PersonService.GetPersonByUser(UserService.User.Id);
                    Idea.PostDateTime = DateTime.UtcNow;
                }
                Idea.Title = Title;
                Idea.IsPublished = true;
                Idea.Description = await Quill.GetHTML();
                var text = await Quill.GetText();
                if (text.Length > 500)
                {
                    Idea.DescriptionShort = text.Substring(0, 500) + "...";
                }
                else
                {
                    Idea.DescriptionShort = text + "...";
                }
                Idea.PostDateTime = DateTime.UtcNow;
                Idea.Tags = TagsString.Split(' ').ToList().Select(q => new Tag { Name = q }).ToList();
                if (Idea.Id != 0)
                {
                    await IdeaService.UpdateIdea(Idea);
                }
                else
                {
                    Idea = await IdeaService.AddIdea(Idea);
                }
                EventService.ShowMessage("Opinion Publish.", MessageType.Success);
                NavigationManager.NavigateTo($"/idea/{Idea.Id}");
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }
    public async void Reset()
    {
        try
        {
            if (Idea != null && Quill != null)
            {
                Title = Idea.Title;
                Description = Idea.Description;
                await Quill.SetContent(Description);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }

    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(IdeaId))
            {
                Idea = await IdeaService.GetIdea(long.Parse(IdeaId));
                Title = Idea.Title;
                Description = Idea.Description;
                TagsString = string.Join(" ", Idea.Tags.Select(q => q.Name).ToArray());
            }
            else
            {
                Idea = null;
                Title = "";
                Description = "";
            }
            if (Quill != null)
            {
                await Quill.SetContent(Description);
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }

}
