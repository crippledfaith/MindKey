@page "/makepost"
@page "/makepost/{IdeaId}"
@using MindKey.Client.Components
@using MindKey.Shared.Models.MindKey
@inject IIdeaService IdeaService
@inject IPersonService PersonService
@inject IUserService UserService
@inject EventService EventService
<div class="card">
    <div class="card-body">
        <h5 class="card-title">State Your Opinion</h5>
        <div class="row g-3">

            <div class="col-12">
                <label for="inputCity" class="form-label">Opinion</label>
                <input type="text" class="form-control" @bind="Title" placeholder="State Your Opinion">
            </div>

        </div>
        <label for="inputCity" class="form-label">Description</label>
        <QuillComponent @ref="Quill" />

        <hr />
        <div class="text-center">
            <button type="button" class="btn btn-primary" @onclick="()=>Save()">Save</button>
            <button type="button" class="btn btn-primary" @onclick="()=>Publish()">Publish</button>
            <button type="reset" class="btn btn-secondary">Reset</button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string IdeaId { get; set; } = null;
    public Idea Idea { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    private string strSavedContent = "";
    public QuillComponent Quill { get; set; }
    private bool EditorEnabled = true;
    public async void Save()
    {
        try
        {
            if (Idea == null)
            {
                Idea = new Idea();
                Idea.Person = await PersonService.GetPersonByUser(UserService.User.Id);
                Idea.PostDateTime = DateTime.UtcNow;
            }
            Idea.Title = Title;
            Idea.Description = await Quill.GetHTML();
            var text = await Quill.GetText();
            if (text.Length > 500)
            {
                Idea.DescriptionShort = text.Substring(0, 500) + "...";
            }
            else
            {
                Idea.DescriptionShort = text + "...";
            }
            Idea.PostDateTime = DateTime.UtcNow;
            if (Idea.Id != 0)
            {
                await IdeaService.UpdateIdea(Idea);
            }
            else
            {
                await IdeaService.AddIdea(Idea);
            }
            EventService.ShowMessage("Opinion Saved.", MessageType.Success);
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }


    }
    public void Publish()
    {

    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(IdeaId))
            {
                Idea = await IdeaService.GetIdea(long.Parse(IdeaId));
                Title = Idea.Title;
                Description = Idea.Description;
            }
            else
            {
                Idea = null;
                Title = "";
                Description = "";
            }
            if (Quill != null)
            {
                await Quill.SetContent(Description);
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }

}
