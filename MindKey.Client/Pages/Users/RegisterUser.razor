@page "/user/RegisterUser"
@inject IUserService UserService
@inject IPersonService PersonService
@inject EventService EventService
@inject NavigationManager NavigationManager
@inject HttpClient Http
<div class="row justify-content-center">
    <div class="col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center">
        <div class="card mb-3">

            <div class="card-body mb-3">

                <div class="pt-4 pb-2">
                    <h5 class="card-title text-center pb-0 fs-4">Create an Account</h5>
                    <p class="text-center small">Enter your personal details to create account</p>
                </div>
                <EditForm Model="@person" class="row g-3" OnValidSubmit="@CreateUser">
                    <FluentValidator TValidator="PersonValidator" />
                    <div class="form-group">
                        <label>First Name</label>
                        <div>
                            <InputText @bind-Value="@person.FirstName" class="form-control col-sm-3" />
                            <ValidationMessage For="@(() => person.FirstName)" />
                        </div>
                    </div>
                    <div class="col-12">
                        <label>Last Name</label>
                        <div>
                            <InputText @bind-Value="@person.LastName" class="form-control col-sm-3" />
                            <ValidationMessage For="@(() => person.LastName)" />
                        </div>
                    </div>
                   @* <div class="col-12">
                        <div>
                            <label>Gender</label>
                            <div>
                                <InputSelect @bind-Value="@person.Gender" class="form-control col-sm-3">
                                    <option value="Select">--Select--</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => person.Gender)" />
                            </div>
                        </div>
                    </div>*@
                </EditForm>
                <EditForm Model="@user" class="row g-3" OnValidSubmit="@CreateUser">
                    <FluentValidator TValidator="UserValidator" />
                    <div class="form-group">
                        <label>Email</label>
                        <div>
                            <InputText @bind-Value="@user.Username" class="form-control col-sm-3" />
                            <ValidationMessage For="@(() => user.Username)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <div>
                            <InputText @bind-Value="@user.Password" type="password" class="form-control col-sm-3" />
                            <ValidationMessage For="@(() => user.Password)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Re-Type Password</label>
                        <div>
                            <InputText @bind-Value="@user.Password" type="password" class="form-control col-sm-3" />
                            <ValidationMessage For="@(() => user.Password)" />
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="form-check">
                            <input class="form-check-input" name="terms" type="checkbox" value="" id="acceptTerms" required>
                            <label class="form-check-label" for="acceptTerms">I agree and accept the <a href="#">terms and conditions</a></label>
                            <div class="invalid-feedback">You must agree before submitting.</div>
                        </div>
                    </div>
                    <button disabled="@loading" class="btn btn-primary col-12">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Create Account
                    </button>
                    <div class="">
                    </div>
                    <div class="col-12">
                        <p class="small mb-0">Already have an account? <NavLink href="/user/login">Log in</NavLink></p>
                    </div>

                </EditForm>

              

            </div>
        </div>

    </div>
</div>



@code {
    Person person = new Person
        {
            Gender = Gender.Other,
            Addresses = new List<Address>
        {
            new Address {Street="", City="", State="", ZipCode=""}
        }
        };
    bool loading = false;
    User user = new User()
        {
            FirstName = "x213123123123123123",
            LastName = "y123123123123123123123",
        };
    async Task CreateUser()
    {
        loading = true;
        try
        {
            string rootpath = AppDomain.CurrentDomain.BaseDirectory;
            string rootpath2 = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "wwwroot");
            string rootpath1 = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot");
            var path = Path.Combine(rootpath, "assets", "img", "user.jpg");
            var stream = await Http.GetStreamAsync(path);
            var buffer = new byte[stream.Length];
            await stream.ReadAsync(buffer);
            person.ProfilePicture = Convert.ToBase64String(buffer);
            user.Id = new Random().NextInt64();
            user.FirstName = person.FirstName;
            user.LastName = person.LastName;
            user.UserType = MindKey.Shared.UserType.User;
            await UserService.AddUser(user);
            if (user == null)
                throw new Exception("Failed to create user.");
            person.User = await UserService.GetUser(user.Id);
    
         
            await PersonService.AddPerson(person);
            NavigationManager.NavigateTo("/user/login");
            EventService.ShowMessage("User created successfully, Please login.", MessageType.Success);
        }
        catch (Exception ex)
        {
            loading = false;
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }
}
