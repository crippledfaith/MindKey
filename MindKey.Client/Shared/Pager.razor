@if (Result != null)
{
    @if (Result.PageCount > 1)
    {
        <ul class="pagination justify-content-center">
            @if (Result.CurrentPage != 1)
            {
                <li class="page-item coursorpointer">
                    <a class="page-link coursorpointer" @onclick="(() => PagerButtonClicked(1))" aria-ar>First</a>
                </li>
            }
            else
            {
                <li class="page-item  coursorpointer">
                    <div class="page-link coursorpointer" disabled="disabled" aria-ar>First</div>
                </li>
            }
            @for (var i = StartIndex; i <= FinishIndex; i++)
            {
                var currentIndex = i;
                @if (i == Result.CurrentPage)
                {
                    <li class="page-item active coursorpointer">
                        <a class="page-link coursorpointer">@i</a>
                    </li>
                }
                else
                {
                    <li class="page-item coursorpointer">
                        <a class="page-link coursorpointer" @onclick="(() => PagerButtonClicked(currentIndex))">@i</a>
                    </li>
                }
            }
            @if (Result.CurrentPage != Result.PageCount)
            {
                <li class="page-item coursorpointer">
                    <a class="page-link coursorpointer" @onclick="(() => PagerButtonClicked(Result.PageCount))">Last</a>
                </li>
            }
            else
            {
                <li class="page-item  coursorpointer">
                    <div class="page-link coursorpointer" disabled="disabled" aria-ar>Last</div>
                </li>
            }
        </ul>
    }
}

@code {
    [Parameter]
    public PagedResultBase Result { get; set; }

    [Parameter]
    public Action<int> PageChanged { get; set; }

    protected int StartIndex { get; private set; } = 0;
    protected int FinishIndex { get; private set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        StartIndex = Math.Max(Result.CurrentPage - 3, 1);
        FinishIndex = Math.Min(StartIndex + 6, Result.PageCount);
        if (FinishIndex - StartIndex < 6 && StartIndex != 1)
        {
            var end = FinishIndex - Result.CurrentPage;
            var add = 6 - end;
            StartIndex = Result.CurrentPage - add;
        }
    }

    protected void PagerButtonClicked(int page)
    {
        PageChanged?.Invoke(page);
    }
}
