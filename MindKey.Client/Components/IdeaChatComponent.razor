@using Humanizer;
@using Humanizer.Localisation;
@using Microsoft.AspNetCore.SignalR.Client;
@using MindKey.Shared.Models.MindKey;
@inject NavigationManager NavigationManager
@inject IUserService UserService;
@inject IChatLinesService ChatLinesService;
@inject EventService EventService;
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h5 class="card-title"><i class="bi bi-chat-right-dots"></i> Chat</h5>
<hr />
<div style="height:400px; overflow:scroll;overflow-x: hidden;" @ref=@ChatDiv>
    @if (Chats != null)
    {
        @foreach (var chat in Chats)
        {
            <div style="margin-left:@(chat.User.Id == UserService.User.Id?"1em":"6em");margin-right:@(chat.User.Id == UserService.User.Id?"6em":"1em"); background-color:@(chat.User.Id == UserService.User.Id?"#3b3b3b":"#2494c2"); border-radius:.5em">
                <div style="padding:.7em">
                    <div>
                        <small style="font-size: 0.75em !important">
                            (@((chat.DateTime - DateTime.UtcNow).Humanize(minUnit: TimeUnit.Second)))
                            @chat.User.FirstName @chat.User.LastName :
                        </small>
                    </div>
                    <h8>@chat.Line</h8>
                </div>
            </div>
            <br />
        }
    }
</div>
<hr />
<InputText style="width:92%" @bind-Value="TextToSend"></InputText>
<button type="button" class="btn btn-primary" @onclick="()=>Send()">Send</button>
@code {
    [Parameter]
    public Idea? Idea { get; set; }
    public string? TextToSend { get; set; }
    public List<ChatLine?>? Chats { get; set; }
    public ElementReference ChatDiv { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Chats = new List<ChatLine?>();
        EventService.ReceiveChatMessageEvent += ReceiveChatMessage;
        await base.OnInitializedAsync();
    }
    public async void ReceiveChatMessage(ChatLine chatLine)
    {
        if (chatLine.Idea.Id == Idea.Id)
        {
            Chats.Add(chatLine);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("scrollToEnd", new object[] { ChatDiv });
        await base.OnAfterRenderAsync(firstRender);
    }


    public async Task Send()
    {
        if (Chats == null)
        {
            Chats = (await ChatLinesService.GetByIdea(Idea.Id)).ToList();
        }
        if (!string.IsNullOrWhiteSpace(TextToSend))
        {
            try
            {
                var chat = new ChatLine() { Idea = Idea, Line = TextToSend, User = UserService.User, DateTime = DateTime.UtcNow };
                TextToSend = "";
                await ChatLinesService.Add(chat);

               await EventService.SendChatMessage(chat);
            }
            catch (Exception ex)
            {
                EventService.ShowMessage(ex.Message, MessageType.Error);
            }

          
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Idea == null)
        {
            return;
        }

        Chats = (await ChatLinesService.GetByIdea(Idea.Id)).ToList();
        StateHasChanged();
        await base.OnParametersSetAsync();
    }

    
}
