@inject IUserService UserService
@inject IIdeaService IdeaService
@inject EventService EventService

@using MindKey.Shared.Models.MindKey
<hr />
<div class="accordion accordion-flush" id="accordionFlushExample">

    @if (IdeaUserCommentPaged == null || Idea == null)
    {
        <span class="badge border-secondary border-1 text-secondary">Loading Comments...</span>
    }
    else
    {
        @foreach (var item in IdeaUserCommentPaged.Results)
        {
            if (UserService.User != null && item.Person.User.Id == UserService.User.Id)
            {
                <EditForm Model="@item">
                    <div class="accordion-item">
                        <h2 class="accordion-header-@accordionHeaderId" id="flush-headingOne-@accordionHeaderId">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@item.Id-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapse-@item.Id-@accordionHeaderId">
                                <img src="/assets/img/profile-img.jpg" alt="Profile" class="rounded-circle" width="25" style="margin:5px">
                                @item.Person.FirstName  @item.Person.LastName
                                @if (item.Argument == ArgumentType.For)
                                {
                                    <i class="oi oi-thumb-up AgreeDisagreeIconMargin" title="Agree" aria-hidden="true"></i>
                                }
                                else if (item.Argument == ArgumentType.Against)
                                {
                                    <i class="oi oi-thumb-down AgreeDisagreeIconMargin" title="Disagree" aria-hidden="true"></i>
                                }
                                else
                                {
                                    <i class="oi oi-loop-square AgreeDisagreeIconMargin" title="Nutral" aria-hidden="true"></i>
                                }
                            </button>
                        </h2>
                        <div id="flush-collapse-@item.Id-@accordionHeaderId" class="accordion-collapse collapse show" aria-labelledby="flush-heading-@item" data-bs-parent="#accordionFlushExample" style="">
                            <div class="accordion-body">
                                <InputTextArea class="TextAreaFill" @bind-Value="item.Description"></InputTextArea>
                            </div>
                            <button type="button" class="btn btn-primary" @onclick="()=>Save(item)">Save</button>
                        </div>
                      
                    </div>
                </EditForm>
            }
            else
            {
                <div class="accordion-item">

                    <h2 class="accordion-header-@accordionHeaderId" id="flush-headingOne-@accordionHeaderId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@item.Id-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapse-@item.Id-@accordionHeaderId">
                            <img src="/assets/img/profile-img.jpg" alt="Profile" class="rounded-circle" width="25" style="margin:5px">
                            @item.Person.FirstName  @item.Person.LastName
                            @if (item.Argument == ArgumentType.For)
                            {
                                <i class="oi oi-thumb-up AgreeDisagreeIconMargin" title="Agree" aria-hidden="true"></i>
                            }
                            else if (item.Argument == ArgumentType.Against)
                            {
                                <i class="oi oi-thumb-down AgreeDisagreeIconMargin" title="Disagree" aria-hidden="true"></i>
                            }
                            else
                            {
                                <i class="oi oi-loop-square AgreeDisagreeIconMargin" title="Nutral" aria-hidden="true"></i>
                            }
                        </button>

                    </h2>
                    <div id="flush-collapse-@item.Id-@accordionHeaderId" class="accordion-collapse collapse" aria-labelledby="flush-heading-@item" data-bs-parent="#accordionFlushExample" style="">
                        <div class="accordion-body">
                            @item.Description
                        </div>
                    </div>
                </div>
            }

        }

    }

</div>

@code {
    [Parameter]
    public Idea Idea { get; set; } = null;
    [Parameter]
    public bool FullMode { get; set; } = false;
    public PagedResult<IdeaUserComment> IdeaUserCommentPaged { get; set; }
    public string accordionHeaderId { get; set; }
    public int LoadedPage = 1;
    public int PageSize = 5;
    protected override void OnInitialized()
    {
        EventService.AgreeDisagreeChangedEvent += AgreeDisagreeChanged;
        base.OnInitialized();

    }
    public async void AgreeDisagreeChanged(Idea idea)
    {
        try
        {
            if (Idea != null && Idea.Id == idea.Id)
            {
                if (FullMode)
                    PageSize = 10;
                IdeaUserCommentPaged = await IdeaService.GetComments(Idea, LoadedPage.ToString(), PageSize.ToString());
                accordionHeaderId = Idea.Id.ToString();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        //EventService.ChangeLoadingStatus(false);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            EventService.ChangeLoadingStatus(true, "CommentComponent-OnParametersSetAsync()");
            if (Idea != null)
            {
                if (FullMode)
                    PageSize = 10;
                IdeaUserCommentPaged = await IdeaService.GetComments(Idea, LoadedPage.ToString(), PageSize.ToString());
                accordionHeaderId = Idea.Id.ToString();
            }
            EventService.ChangeLoadingStatus(false, "CommentComponent-OnParametersSetAsync()");
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }

        await base.OnParametersSetAsync();

    }
    public async Task Save(IdeaUserComment comment)
    {
        try
        {
            comment.Person.Addresses = new List<Address>();
            await IdeaService.SetComment(comment);
            EventService.ShowMessage("Comment Saved", MessageType.Success);
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }
}
