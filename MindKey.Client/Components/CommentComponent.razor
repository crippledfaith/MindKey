@inject IUserService UserService
@inject IIdeaService IdeaService
@inject EventService EventService

@using MindKey.Shared.Models.MindKey
<hr />
<div class="accordion accordion-flush" id="accordionFlushExample">

    @if (IdeaUserCommentPaged == null || Idea == null)
    {
        <span class="badge border-secondary border-1 text-secondary">Loading Comments...</span>
    }
    else
    {
        @foreach (var item in IdeaUserCommentPaged.Results)
        {
            <div class="accordion-item">
                <h2 class="accordion-header-@accordionHeaderId" id="flush-headingOne-@accordionHeaderId">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@item.Id-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapse-@item.Id-@accordionHeaderId">
                        @item.Title
                    </button>
                </h2>
                <div id="flush-collapse-@item.Id-@accordionHeaderId" class="accordion-collapse collapse" aria-labelledby="flush-heading-@item" data-bs-parent="#accordionFlushExample" style="">
                    <div class="accordion-body">
                        @item.Description
                    </div>
                </div>
            </div>
        }

    }
    @*<div class="accordion-item">
    <h2 class="accordion-header-@accordionHeaderId" id="flush-headingOne-@accordionHeaderId">
    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapseOne-@accordionHeaderId">
    Accordion Item #1
    </button>
    </h2>
    <div id="flush-collapseOne-@accordionHeaderId" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample" style="">
    <div class="accordion-body">
    Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the first item's accordion body.
    </div>
    </div>
    </div>
    <div class="accordion-item">
    <h2 class="accordion-header" id="flush-headingTwo-@accordionHeaderId">
    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapseTwo-@accordionHeaderId"> Accordion Item #2 </button>
    </h2>
    <div id="flush-collapseTwo-@accordionHeaderId" class="accordion-collapse collapse" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlushExample" style="">
    <div class="accordion-body">
    Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code> class. This is the second item's accordion body. Let's imagine this being filled with some actual content.
    </div>
    </div>
    </div>
    <div class="accordion-item">
    <h2 class="accordion-header" id="flush-headingThree-@accordionHeaderId">
    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseThree-@accordionHeaderId" aria-expanded="false" aria-controls="flush-collapseThree-@accordionHeaderId"> Accordion Item #3 </button>
    </h2>
    <div id="flush-collapseThree-@accordionHeaderId" class="accordion-collapse collapse" aria-labelledby="flush-headingThree" data-bs-parent="#accordionFlushExample" style="">
    <div class="accordion-body">
    Placeholder content for this accordion, which is intended to demonstrate the <code>.accordion-flush</code>  class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.
    </div>
    </div>
    </div>*@
</div>

@code {
    [Parameter]
    public Idea Idea { get; set; } = null;
    public PagedResult<IdeaUserComment> IdeaUserCommentPaged { get; set; }
    public string accordionHeaderId { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        //EventService.ChangeLoadingStatus(false);
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            EventService.ChangeLoadingStatus(true, "CommentComponent-OnParametersSetAsync()");
            if (Idea != null)
            {
                IdeaUserCommentPaged = await IdeaService.GetComments(Idea, "1");
                accordionHeaderId = Idea.Id.ToString();
            }
            EventService.ChangeLoadingStatus(false, "CommentComponent-OnParametersSetAsync()");
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }

        await base.OnParametersSetAsync();

    }
}
