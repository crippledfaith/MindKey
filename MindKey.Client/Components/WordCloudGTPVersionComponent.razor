@inject IIdeaService IdeaService;
@inject IJSRuntime JSRuntime
@inject EventService EventService;
@inject IResizeListener listener

@using Blazor.ECharts.Options;
@using Blazor.Extensions;
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using MindKey.Shared.Models.MindKey;
@using Microsoft.JSInterop;

@implements IDisposable
<style>
    canvas {
        background-color: transparent;
        height: 500px
    }
</style>
@if (_showImage)
{
    <img @ref="_image" src="@_imageSource" />
}
@if (_showCanvas)
{
    <BECanvas Height="500" Width="@_canvasWidth" @ref="_canvasReference"></BECanvas>
}



@code {
    private Dictionary<string, int> TagList { get; set; } = new Dictionary<string, int>();
    private readonly Random _random = new Random();
    protected BECanvasComponent _canvasReference;
    protected ElementReference _image;
    protected string? _imageSource;
    BrowserWindowSize browser = new BrowserWindowSize();
    public bool _showImage { get; set; } = false;
    public bool _showCanvas { get; set; } = true;
    public long _canvasWidth { get; set; }
    protected override async Task OnInitializedAsync()
    {


        await base.OnInitializedAsync();
    }

    class DictionaryComparer : IComparer<KeyValuePair<string, int>>
    {
        public int Compare(KeyValuePair<string, int> x, KeyValuePair<string, int> y)
        {
            return y.Value.CompareTo(x.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            listener.OnResized += WindowResized;
        }


        await base.OnAfterRenderAsync(firstRender);
    }
    void IDisposable.Dispose()
    {

        listener.OnResized -= WindowResized;
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {
        browser = window;
        var c = await JSRuntime.InvokeAsync<int>("CanvasFunctions.resize");

        _showCanvas = false;
        _showImage = false;
        StateHasChanged();
        await DrawWordCloud(TagList, 500 - 58, Convert.ToInt32(c)-40);

        StateHasChanged();
    }

    private async Task DrawWordCloud(Dictionary<string, int> wordCount, int height, int width)
    {
        var x = 50;
        var y = 50;
        var maxRowHeight = 0;
        var imageMask = new bool[width * height];
        var result = await IdeaService.GetWordCloud(new WorkCloudParameter() { WordLimit = 50, Height = height, Width = width });
        if (string.IsNullOrEmpty(result.Image))
        {

            _showCanvas = true;

            StateHasChanged();

            var context = await this._canvasReference.CreateCanvas2DAsync();
            _canvasWidth = width;

            StateHasChanged();

            foreach (var word in result.Data)
            {
                await context.SetFillStyleAsync(word.FillStyle);
                await context.SetFontAsync(word.Font);
                await context.RotateAsync(word.Rotate);
                await context.FillTextAsync(word.Word, word.X, word.Y);
                await context.RotateAsync(-word.Rotate);
            }
        }
        else
        {
            _showImage = true;
            StateHasChanged();
            _imageSource = $"data:image/png;base64,{result.Image}";
        }
    }

}
