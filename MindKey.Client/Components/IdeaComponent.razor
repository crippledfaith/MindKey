@using MindKey.Shared.Models.MindKey

@inject NavigationManager navManager
@inject EventService EventService
@inject IIdeaService IdeaService
@inject IJSRuntime JSRuntime
@if (Idea == null || Idea.Id == 0)
{
    <div class="card info-card" style="opacity:.7">
        <div class="card-body">
            <h5 class="card-title"><i class="bi bi-lightbulb-fill"> </i>Loading...</h5>
            <div id="toolbar" style="visibility:collapse"> </div>
            <QuillComponent @ref="Quill" Disable="true" HideToolBar="true" DefaultText="Loading..."></QuillComponent>
            
            <br />
            <TagComponent Idea="@null" />
            <IdeaUserPanelComponent Idea="@null" />
            <AgreeDisagreeComponent Idea="@null" />
            <CommentComponent Idea="@null" />
        </div>
    </div>
}
else
{
    <div class="card info-card">
        <div class="card-body @DeletingClass">

            @if (!FullMode)
            {
                <h5 class="card-title" @onclick="()=>OpenCard()" style="cursor:pointer"><i class="bi bi-lightbulb-fill"> </i><a>@Idea.Title</a></h5>
            }
            else
            {
                <h5 class="card-title" style="Cursor:default"><i class="bi bi-lightbulb-fill"></i>@Idea.Title</h5>
            }
            <div id="toolbar" style="visibility:collapse"> </div>
            <div style="margin-top:-10px">
                <QuillComponent @ref="Quill" Disable="true" HideToolBar="true" DefaultText="@Description" />
            </div>
            <br />
            <TagComponent Idea="@Idea" />
            <IdeaUserPanelComponent Idea="@Idea" />
            <AgreeDisagreeComponent Idea="@Idea" />
            <CommentComponent Idea="@Idea" FullMode="@FullMode" />
        </div>
    </div>

}

@code {
    [Parameter]
    public Idea? Idea { get; set; }
    [Parameter]
    public bool FullMode { get; set; } = false;
    public string? Description { get; set; }
    public QuillComponent? Quill { get; set; }
    public string DeletingClass { get; set; } = "";


    protected override void OnInitialized()
    {
        EventService.EditIdeaEvent -= EditIdea;
        EventService.DeleteIdeaEvent -= DeleteIdea;
        EventService.EditIdeaEvent += EditIdea;
        EventService.DeleteIdeaEvent += DeleteIdea;
        base.OnInitialized();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        DeletingClass = "";
        Description = Idea.Description;
    }

    public void EditIdea(Idea idea)
    {
        navManager.NavigateTo($"/makepost/{idea.Id}");
    }
    public void DeleteIdea(Idea idea)
    {
        if (Idea != null && Idea.Id == idea.Id)
        {
            DeletingClass = "DeletingIdea";
            StateHasChanged();
            IdeaService.DeleteIdea(idea.Id);
            EventService.DeletedIdea(idea);
        }
    }

   
    public void OpenCard()
    {
        if (Idea != null)
            navManager.NavigateTo($"/idea/{Idea.Id}");
    }

}
