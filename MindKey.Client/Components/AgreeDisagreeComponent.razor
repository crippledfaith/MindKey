@using MindKey.Shared.Models.MindKey
@inject IUserService UserService

<div class="progress" style="height: 10px;"><div class="progress-bar" role="progressbar" style="width: @Width%" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div></div>
<br />
@if (disable)
{
    <button class="btn btn-primary" disabled>
        <i class="oi oi-thumb-up" title="search" aria-hidden="true"></i>
    </button>
}
else
{
    <button class="btn btn-primary">
        <i class="oi oi-thumb-up" title="search" aria-hidden="true"></i>
    </button>
}
<span class="badge border-secondary border-1 text-secondary">@ToKiloFormat(Idea.ForCount)</span>
@if (disable)
{
    <button class="btn btn-primary" disabled>
        <i class="oi oi-thumb-down" title="search" aria-hidden="true"></i>
    </button>
}
else
{
    <button class="btn btn-primary">
        <i class="oi oi-thumb-down" title="search" aria-hidden="true"></i>
    </button>
}
<span class="badge border-secondary border-1 text-secondary">@ToKiloFormat(Idea.AgainstCount)</span>
@if (disable)
{
    <button class="btn btn-info" disabled>
        <i class="oi oi-loop-square" title="search" aria-hidden="true"></i>
    </button>
}
else
{
    <button class="btn btn-info">
        <i class="oi oi-loop-square" title="search" aria-hidden="true"></i>
    </button>
}

<span class="badge border-secondary border-1 text-secondary">@ToKiloFormat(Idea.NetrulCount)</span>
@code {
    [Parameter]
    public Idea Idea { get; set; } = null;
    public decimal Width { get; set; }
    public bool disable { get; set; } = true;
    protected override void OnParametersSet()
    {
        if (UserService.User != null)
            disable = (Idea.Person.PersonId == UserService.User.Id);

        //base.OnParametersSet();
    }
    public string ToKiloFormat(long num)
    {
        return num switch
        {
            >= 100000000 => (num / 1000000D).ToString("0.#M"),
            >= 1000000 => (num / 1000000D).ToString("0.##M"),
            >= 100000 => (num / 1000D).ToString("0.#k"),
            >= 10000 => (num / 1000D).ToString("0.##k"),
            _ => num.ToString("#,0")
        };
    }
    protected override Task OnParametersSetAsync()
    {
        if (Idea.AgainstCount == 0)
            Width = 0;
        else
            Width = (Convert.ToDecimal(Idea.ForCount) / Convert.ToDecimal(Idea.AgainstCount)) * 100;
        return base.OnParametersSetAsync();
    }
}
