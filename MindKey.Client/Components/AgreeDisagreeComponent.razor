@using MindKey.Shared.Models.MindKey
@inject IUserService UserService
@inject IIdeaService IdeaService
@inject EventService EventService

<div class="progress" style="height: 10px;"><div class="progress-bar" role="progressbar" style="width: @Width%" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div></div>
<br />
@if (Idea == null || IdeaUserComment == null)
{
    <button class="btn btn-primary" disabled>
        <i class="oi oi-thumb-up" title="Agree" aria-hidden="true"></i>
    </button>
    <span class="badge border-secondary border-1 text-secondary coursorpointer">0</span>

    <button class="btn btn-primary" disabled>
        <i class="oi oi-thumb-down" title="Disagree" aria-hidden="true"></i>
    </button>
    <span class="badge border-secondary border-1 text-secondary coursorpointer">0</span>

    <button class="btn btn-primary" disabled>
        <i class="oi oi-loop-square" title="Nutral" aria-hidden="true"></i>
    </button>

    <span class="badge border-secondary border-1 text-secondary coursorpointer">0</span>

}
else
{

    @if ((IdeaUserComment.User != null && IdeaUserComment.Argument != ArgumentType.For) || disable)
    {
        <button class="btn btn-primary" disabled>
            <i class="oi oi-thumb-up" title="Agree" aria-hidden="true"></i>
        </button>
    }
    else if (IdeaUserComment.User != null && IdeaUserComment.Argument == ArgumentType.For)
    {
        <button class="btn btn-info" disabled>
            <i class="oi oi-thumb-up" title="Agree" aria-hidden="true"></i>
        </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="()=>Agree()">
            <i class="oi oi-thumb-up" title="Agree" aria-hidden="true"></i>
        </button>
    }
    <span class="badge border-secondary border-1 text-secondary coursorpointer">@ToKiloFormat(Idea.ForCount)</span>

    @if ((IdeaUserComment.User != null && IdeaUserComment.Argument != ArgumentType.Against) || disable)
    {
        <button class="btn btn-primary" disabled>
            <i class="oi oi-thumb-down" title="Disagree" aria-hidden="true"></i>
        </button>
    }
    else if (IdeaUserComment.User != null && IdeaUserComment.Argument == ArgumentType.Against)
    {
        <button class="btn btn-info" disabled>
            <i class="oi oi-thumb-down" title="Disagree" aria-hidden="true"></i>
        </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="()=>Disagree()">
            <i class="oi oi-thumb-down" title="Disagree" aria-hidden="true"></i>
        </button>
    }
    <span class="badge border-secondary border-1 text-secondary coursorpointer">@ToKiloFormat(Idea.AgainstCount)</span>

    @if ((IdeaUserComment.User != null && IdeaUserComment.Argument != ArgumentType.Nutral) || disable)
    {
        <button class="btn btn-primary" disabled>
            <i class="oi oi-loop-square" title="Nutral" aria-hidden="true"></i>
        </button>
    }
    else if (IdeaUserComment.User != null && IdeaUserComment.Argument == ArgumentType.Nutral)
    {
        <button class="btn btn-info" disabled>
            <i class="oi oi-loop-square" title="Nutral" aria-hidden="true"></i>
        </button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="()=>Nutral()">
            <i class="oi oi-loop-square" title="Nutral" aria-hidden="true"></i>
        </button>
    }
    <span class="badge border-secondary border-1 text-secondary coursorpointer">@ToKiloFormat(Idea.NetrulCount)</span>
}
<PopupLayout @ref="popupRef" />

@code {
    [Parameter]
    public Idea? Idea { get; set; }
    public IdeaUserComment? IdeaUserComment { get; set; }
    public decimal Width { get; set; } = 0;
    public bool disable { get; set; } = true;
    private PopupLayout? popupRef;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    public async Task Agree()
    {
        popupRef?.Show("Popup body text");
        await UpdateVote(ArgumentType.For);
        StateHasChanged();
    }

    public async Task Disagree()
    {
        await UpdateVote(ArgumentType.Against);
        StateHasChanged();
    }


    public async Task Nutral()
    {
        await UpdateVote(ArgumentType.Nutral);
        StateHasChanged();
    }
    private async Task UpdateVote(ArgumentType type)
    {
        try
        {
            if (Idea != null)
            {
                Idea.Argument = type;
                StateHasChanged();
                var idea = await IdeaService.GetIdea(Idea.Id);
                var ideaUserComment = new IdeaUserComment
                    {
                        Argument = type,
                        Idea = idea,
                        User = UserService.User ?? new User(),
                        Title = "Test Title",
                        Description = "Test Description",
                    };
                ideaUserComment.User.Password = "***";

                if (await IdeaService.SetComment(ideaUserComment))
                {
                    IdeaUserComment = await IdeaService.GetComment(ideaUserComment);
                }
                Idea = await IdeaService.GetIdea(Idea.Id);
                if (Idea.AgainstCount == 0)
                {
                    Width = (Convert.ToDecimal(Idea.ForCount) / Convert.ToDecimal(1 + Idea.ForCount)) * 100;
                }
                else
                {
                    Width = (Convert.ToDecimal(Idea.ForCount) / Convert.ToDecimal(Idea.AgainstCount + Idea.ForCount)) * 100;
                }
                EventService.AgreeDisagreeChanged(Idea);
            }
        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }


    }

    public string ToKiloFormat(long num)
    {
        return num switch
        {
            >= 100000000 => (num / 1000000D).ToString("0.#M"),
            >= 1000000 => (num / 1000000D).ToString("0.##M"),
            >= 100000 => (num / 1000D).ToString("0.#k"),
            >= 10000 => (num / 1000D).ToString("0.##k"),
            _ => num.ToString("#,0")
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Idea != null && Idea.Person != null)
            {
                EventService.ChangeLoadingStatus(true, "AgreeDisagreeComponent-OnParametersSetAsync()");
                if (Idea.AgainstCount == 0)
                {
                    Idea.AgainstCount = 1;
                }
                Width = (Convert.ToDecimal(Idea.ForCount) / Convert.ToDecimal(Idea.AgainstCount + Idea.ForCount)) * 100;
                if (UserService.User != null && Idea?.Person != null)
                    disable = (Idea.Person.PersonId == UserService.User.Id);
                //Idea = await IdeaService.GetIdea(Idea.Id);
                var ideaUserComment = new IdeaUserComment
                    {
                        Argument = ArgumentType.Nutral,
                        Idea = Idea,
                        User = UserService.User ?? new User(),
                        Title = "Test Title",
                        Description = "Test Description",
                    };
                ideaUserComment.User.Password = "***";
                IdeaUserComment = await IdeaService.GetComment(ideaUserComment);
                EventService.ChangeLoadingStatus(false, "AgreeDisagreeComponent-OnParametersSetAsync()");
            }
            await base.OnParametersSetAsync();

        }
        catch (Exception ex)
        {
            EventService.ShowMessage(ex.Message, MessageType.Error);
        }
    }
}
